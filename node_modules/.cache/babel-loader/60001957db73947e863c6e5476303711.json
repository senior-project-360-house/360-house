{"ast":null,"code":"/*! geolib 2.0.23 by Manuel Bieh\r\n* Library to provide geo functions like distance calculation,\r\n* conversion of decimal coordinates to sexagesimal and vice versa, etc.\r\n* WGS 84 (World Geodetic System 1984)\r\n* \r\n* @author Manuel Bieh\r\n* @url http://www.manuelbieh.com/\r\n* @version 2.0.23\r\n* @license MIT \r\n**/\n;\n\n(function (global, undefined) {\n  \"use strict\";\n\n  function Geolib() {} // Constants\n\n\n  Geolib.TO_RAD = Math.PI / 180;\n  Geolib.TO_DEG = 180 / Math.PI;\n  Geolib.PI_X2 = Math.PI * 2;\n  Geolib.PI_DIV4 = Math.PI / 4; // Setting readonly defaults\n\n  var geolib = Object.create(Geolib.prototype, {\n    version: {\n      value: \"2.0.23\"\n    },\n    radius: {\n      value: 6378137\n    },\n    minLat: {\n      value: -90\n    },\n    maxLat: {\n      value: 90\n    },\n    minLon: {\n      value: -180\n    },\n    maxLon: {\n      value: 180\n    },\n    sexagesimalPattern: {\n      value: /^([0-9]{1,3})°\\s*([0-9]{1,3}(?:\\.(?:[0-9]{1,2}))?)'\\s*(([0-9]{1,3}(\\.([0-9]{1,4}))?)\"\\s*)?([NEOSW]?)$/\n    },\n    measures: {\n      value: Object.create(Object.prototype, {\n        \"m\": {\n          value: 1\n        },\n        \"km\": {\n          value: 0.001\n        },\n        \"cm\": {\n          value: 100\n        },\n        \"mm\": {\n          value: 1000\n        },\n        \"mi\": {\n          value: 1 / 1609.344\n        },\n        \"sm\": {\n          value: 1 / 1852.216\n        },\n        \"ft\": {\n          value: 100 / 30.48\n        },\n        \"in\": {\n          value: 100 / 2.54\n        },\n        \"yd\": {\n          value: 1 / 0.9144\n        }\n      })\n    },\n    prototype: {\n      value: Geolib.prototype\n    },\n    extend: {\n      value: function value(methods, overwrite) {\n        for (var prop in methods) {\n          if (typeof geolib.prototype[prop] === 'undefined' || overwrite === true) {\n            if (typeof methods[prop] === 'function' && typeof methods[prop].bind === 'function') {\n              geolib.prototype[prop] = methods[prop].bind(geolib);\n            } else {\n              geolib.prototype[prop] = methods[prop];\n            }\n          }\n        }\n      }\n    }\n  });\n\n  if (typeof Number.prototype.toRad === 'undefined') {\n    Number.prototype.toRad = function () {\n      return this * Geolib.TO_RAD;\n    };\n  }\n\n  if (typeof Number.prototype.toDeg === 'undefined') {\n    Number.prototype.toDeg = function () {\n      return this * Geolib.TO_DEG;\n    };\n  } // Here comes the magic\n\n\n  geolib.extend({\n    decimal: {},\n    sexagesimal: {},\n    distance: null,\n    getKeys: function getKeys(point) {\n      // GeoJSON Array [longitude, latitude(, elevation)]\n      if (Object.prototype.toString.call(point) == '[object Array]') {\n        return {\n          longitude: point.length >= 1 ? 0 : undefined,\n          latitude: point.length >= 2 ? 1 : undefined,\n          elevation: point.length >= 3 ? 2 : undefined\n        };\n      }\n\n      var getKey = function getKey(possibleValues) {\n        var key;\n        possibleValues.every(function (val) {\n          // TODO: check if point is an object\n          if (typeof point != 'object') {\n            return true;\n          }\n\n          return point.hasOwnProperty(val) ? function () {\n            key = val;\n            return false;\n          }() : true;\n        });\n        return key;\n      };\n\n      var longitude = getKey(['lng', 'lon', 'longitude']);\n      var latitude = getKey(['lat', 'latitude']);\n      var elevation = getKey(['alt', 'altitude', 'elevation', 'elev']); // return undefined if not at least one valid property was found\n\n      if (typeof latitude == 'undefined' && typeof longitude == 'undefined' && typeof elevation == 'undefined') {\n        return undefined;\n      }\n\n      return {\n        latitude: latitude,\n        longitude: longitude,\n        elevation: elevation\n      };\n    },\n    // returns latitude of a given point, converted to decimal\n    // set raw to true to avoid conversion\n    getLat: function getLat(point, raw) {\n      return raw === true ? point[this.getKeys(point).latitude] : this.useDecimal(point[this.getKeys(point).latitude]);\n    },\n    // Alias for getLat\n    latitude: function latitude(point) {\n      return this.getLat.call(this, point);\n    },\n    // returns longitude of a given point, converted to decimal\n    // set raw to true to avoid conversion\n    getLon: function getLon(point, raw) {\n      return raw === true ? point[this.getKeys(point).longitude] : this.useDecimal(point[this.getKeys(point).longitude]);\n    },\n    // Alias for getLon\n    longitude: function longitude(point) {\n      return this.getLon.call(this, point);\n    },\n    getElev: function getElev(point) {\n      return point[this.getKeys(point).elevation];\n    },\n    // Alias for getElev\n    elevation: function elevation(point) {\n      return this.getElev.call(this, point);\n    },\n    coords: function coords(point, raw) {\n      var retval = {\n        latitude: raw === true ? point[this.getKeys(point).latitude] : this.useDecimal(point[this.getKeys(point).latitude]),\n        longitude: raw === true ? point[this.getKeys(point).longitude] : this.useDecimal(point[this.getKeys(point).longitude])\n      };\n      var elev = point[this.getKeys(point).elevation];\n\n      if (typeof elev !== 'undefined') {\n        retval['elevation'] = elev;\n      }\n\n      return retval;\n    },\n    // Alias for coords\n    ll: function ll(point, raw) {\n      return this.coords.call(this, point, raw);\n    },\n    // checks if a variable contains a valid latlong object\n    validate: function validate(point) {\n      var keys = this.getKeys(point);\n\n      if (typeof keys === 'undefined' || typeof keys.latitude === 'undefined' || keys.longitude === 'undefined') {\n        return false;\n      }\n\n      var lat = point[keys.latitude];\n      var lng = point[keys.longitude];\n\n      if (typeof lat === 'undefined' || !this.isDecimal(lat) && !this.isSexagesimal(lat)) {\n        return false;\n      }\n\n      if (typeof lng === 'undefined' || !this.isDecimal(lng) && !this.isSexagesimal(lng)) {\n        return false;\n      }\n\n      lat = this.useDecimal(lat);\n      lng = this.useDecimal(lng);\n\n      if (lat < this.minLat || lat > this.maxLat || lng < this.minLon || lng > this.maxLon) {\n        return false;\n      }\n\n      return true;\n    },\n\n    /**\n    * Calculates geodetic distance between two points specified by latitude/longitude using\n    * Vincenty inverse formula for ellipsoids\n    * Vincenty Inverse Solution of Geodesics on the Ellipsoid (c) Chris Veness 2002-2010\n    * (Licensed under CC BY 3.0)\n    *\n    * @param    object    Start position {latitude: 123, longitude: 123}\n    * @param    object    End position {latitude: 123, longitude: 123}\n    * @param    integer   Accuracy (in meters)\n    * @param    integer   Precision (in decimal cases)\n    * @return   integer   Distance (in meters)\n    */\n    getDistance: function getDistance(start, end, accuracy, precision) {\n      accuracy = Math.floor(accuracy) || 1;\n      precision = Math.floor(precision) || 0;\n      var s = this.coords(start);\n      var e = this.coords(end);\n      var a = 6378137,\n          b = 6356752.314245,\n          f = 1 / 298.257223563; // WGS-84 ellipsoid params\n\n      var L = (e['longitude'] - s['longitude']).toRad();\n      var cosSigma, sigma, sinAlpha, cosSqAlpha, cos2SigmaM, sinSigma;\n      var U1 = Math.atan((1 - f) * Math.tan(parseFloat(s['latitude']).toRad()));\n      var U2 = Math.atan((1 - f) * Math.tan(parseFloat(e['latitude']).toRad()));\n      var sinU1 = Math.sin(U1),\n          cosU1 = Math.cos(U1);\n      var sinU2 = Math.sin(U2),\n          cosU2 = Math.cos(U2);\n      var lambda = L,\n          lambdaP,\n          iterLimit = 100;\n\n      do {\n        var sinLambda = Math.sin(lambda),\n            cosLambda = Math.cos(lambda);\n        sinSigma = Math.sqrt(cosU2 * sinLambda * (cosU2 * sinLambda) + (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda) * (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda));\n\n        if (sinSigma === 0) {\n          return geolib.distance = 0; // co-incident points\n        }\n\n        cosSigma = sinU1 * sinU2 + cosU1 * cosU2 * cosLambda;\n        sigma = Math.atan2(sinSigma, cosSigma);\n        sinAlpha = cosU1 * cosU2 * sinLambda / sinSigma;\n        cosSqAlpha = 1 - sinAlpha * sinAlpha;\n        cos2SigmaM = cosSigma - 2 * sinU1 * sinU2 / cosSqAlpha;\n\n        if (isNaN(cos2SigmaM)) {\n          cos2SigmaM = 0; // equatorial line: cosSqAlpha=0 (§6)\n        }\n\n        var C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha));\n        lambdaP = lambda;\n        lambda = L + (1 - C) * f * sinAlpha * (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM)));\n      } while (Math.abs(lambda - lambdaP) > 1e-12 && --iterLimit > 0);\n\n      if (iterLimit === 0) {\n        return NaN; // formula failed to converge\n      }\n\n      var uSq = cosSqAlpha * (a * a - b * b) / (b * b);\n      var A = 1 + uSq / 16384 * (4096 + uSq * (-768 + uSq * (320 - 175 * uSq)));\n      var B = uSq / 1024 * (256 + uSq * (-128 + uSq * (74 - 47 * uSq)));\n      var deltaSigma = B * sinSigma * (cos2SigmaM + B / 4 * (cosSigma * (-1 + 2 * cos2SigmaM * cos2SigmaM) - B / 6 * cos2SigmaM * (-3 + 4 * sinSigma * sinSigma) * (-3 + 4 * cos2SigmaM * cos2SigmaM)));\n      var distance = b * A * (sigma - deltaSigma);\n      distance = distance.toFixed(precision); // round to 1mm precision\n      //if (start.hasOwnProperty(elevation) && end.hasOwnProperty(elevation)) {\n\n      if (typeof this.elevation(start) !== 'undefined' && typeof this.elevation(end) !== 'undefined') {\n        var climb = Math.abs(this.elevation(start) - this.elevation(end));\n        distance = Math.sqrt(distance * distance + climb * climb);\n      }\n\n      return this.distance = Math.round(distance * Math.pow(10, precision) / accuracy) * accuracy / Math.pow(10, precision);\n      /*\n      // note: to return initial/final bearings in addition to distance, use something like:\n      var fwdAz = Math.atan2(cosU2*sinLambda,  cosU1*sinU2-sinU1*cosU2*cosLambda);\n      var revAz = Math.atan2(cosU1*sinLambda, -sinU1*cosU2+cosU1*sinU2*cosLambda);\n       return { distance: s, initialBearing: fwdAz.toDeg(), finalBearing: revAz.toDeg() };\n      */\n    },\n\n    /**\n    * Calculates the distance between two spots.\n    * This method is more simple but also far more inaccurate\n    *\n    * @param    object    Start position {latitude: 123, longitude: 123}\n    * @param    object    End position {latitude: 123, longitude: 123}\n    * @param    integer   Accuracy (in meters)\n    * @return   integer   Distance (in meters)\n    */\n    getDistanceSimple: function getDistanceSimple(start, end, accuracy) {\n      accuracy = Math.floor(accuracy) || 1;\n      var distance = Math.round(Math.acos(Math.sin(this.latitude(end).toRad()) * Math.sin(this.latitude(start).toRad()) + Math.cos(this.latitude(end).toRad()) * Math.cos(this.latitude(start).toRad()) * Math.cos(this.longitude(start).toRad() - this.longitude(end).toRad())) * this.radius);\n      return geolib.distance = Math.floor(Math.round(distance / accuracy) * accuracy);\n    },\n\n    /**\n        * Calculates the center of a collection of geo coordinates\n        *\n        * @param        array       Collection of coords [{latitude: 51.510, longitude: 7.1321}, {latitude: 49.1238, longitude: \"8° 30' W\"}, ...]\n        * @return       object      {latitude: centerLat, longitude: centerLng}\n        */\n    getCenter: function getCenter(coords) {\n      var coordsArray = coords;\n\n      if (typeof coords === 'object' && !(coords instanceof Array)) {\n        coordsArray = [];\n\n        for (var key in coords) {\n          coordsArray.push(this.coords(coords[key]));\n        }\n      }\n\n      if (!coordsArray.length) {\n        return false;\n      }\n\n      var X = 0.0;\n      var Y = 0.0;\n      var Z = 0.0;\n      var lat, lon, hyp;\n      coordsArray.forEach(function (coord) {\n        lat = this.latitude(coord).toRad();\n        lon = this.longitude(coord).toRad();\n        X += Math.cos(lat) * Math.cos(lon);\n        Y += Math.cos(lat) * Math.sin(lon);\n        Z += Math.sin(lat);\n      }, this);\n      var nb_coords = coordsArray.length;\n      X = X / nb_coords;\n      Y = Y / nb_coords;\n      Z = Z / nb_coords;\n      lon = Math.atan2(Y, X);\n      hyp = Math.sqrt(X * X + Y * Y);\n      lat = Math.atan2(Z, hyp);\n      return {\n        latitude: (lat * Geolib.TO_DEG).toFixed(6),\n        longitude: (lon * Geolib.TO_DEG).toFixed(6)\n      };\n    },\n\n    /**\n    * Gets the max and min, latitude, longitude, and elevation (if provided).\n    * @param        array       array with coords e.g. [{latitude: 51.5143, longitude: 7.4138}, {latitude: 123, longitude: 123}, ...]\n    * @return   object      {maxLat: maxLat,\n    *                     minLat: minLat\n    *                     maxLng: maxLng,\n    *                     minLng: minLng,\n    *                     maxElev: maxElev,\n    *                     minElev: minElev}\n    */\n    getBounds: function getBounds(coords) {\n      if (!coords.length) {\n        return false;\n      }\n\n      var useElevation = this.elevation(coords[0]);\n      var stats = {\n        maxLat: -Infinity,\n        minLat: Infinity,\n        maxLng: -Infinity,\n        minLng: Infinity\n      };\n\n      if (typeof useElevation != 'undefined') {\n        stats.maxElev = 0;\n        stats.minElev = Infinity;\n      }\n\n      for (var i = 0, l = coords.length; i < l; ++i) {\n        stats.maxLat = Math.max(this.latitude(coords[i]), stats.maxLat);\n        stats.minLat = Math.min(this.latitude(coords[i]), stats.minLat);\n        stats.maxLng = Math.max(this.longitude(coords[i]), stats.maxLng);\n        stats.minLng = Math.min(this.longitude(coords[i]), stats.minLng);\n\n        if (useElevation) {\n          stats.maxElev = Math.max(this.elevation(coords[i]), stats.maxElev);\n          stats.minElev = Math.min(this.elevation(coords[i]), stats.minElev);\n        }\n      }\n\n      return stats;\n    },\n\n    /**\n    * Calculates the center of the bounds of geo coordinates.\n    *\n    * On polygons like political borders (eg. states)\n    * this may gives a closer result to human expectation, than `getCenter`,\n    * because that function can be disturbed by uneven distribution of\n    * point in different sides.\n    * Imagine the US state Oklahoma: `getCenter` on that gives a southern\n    * point, because the southern border contains a lot more nodes,\n    * than the others.\n    *\n    * @param        array       Collection of coords [{latitude: 51.510, longitude: 7.1321}, {latitude: 49.1238, longitude: \"8° 30' W\"}, ...]\n    * @return       object      {latitude: centerLat, longitude: centerLng}\n    */\n    getCenterOfBounds: function getCenterOfBounds(coords) {\n      var b = this.getBounds(coords);\n      var latitude = b.minLat + (b.maxLat - b.minLat) / 2;\n      var longitude = b.minLng + (b.maxLng - b.minLng) / 2;\n      return {\n        latitude: parseFloat(latitude.toFixed(6)),\n        longitude: parseFloat(longitude.toFixed(6))\n      };\n    },\n\n    /**\n    * Computes the bounding coordinates of all points on the surface\n    * of the earth less than or equal to the specified great circle\n    * distance.\n    *\n    * @param object Point position {latitude: 123, longitude: 123}\n    * @param number Distance (in meters).\n    * @return array Collection of two points defining the SW and NE corners.\n    */\n    getBoundsOfDistance: function getBoundsOfDistance(point, distance) {\n      var latitude = this.latitude(point);\n      var longitude = this.longitude(point);\n      var radLat = latitude.toRad();\n      var radLon = longitude.toRad();\n      var radDist = distance / this.radius;\n      var minLat = radLat - radDist;\n      var maxLat = radLat + radDist;\n      var MAX_LAT_RAD = this.maxLat.toRad();\n      var MIN_LAT_RAD = this.minLat.toRad();\n      var MAX_LON_RAD = this.maxLon.toRad();\n      var MIN_LON_RAD = this.minLon.toRad();\n      var minLon;\n      var maxLon;\n\n      if (minLat > MIN_LAT_RAD && maxLat < MAX_LAT_RAD) {\n        var deltaLon = Math.asin(Math.sin(radDist) / Math.cos(radLat));\n        minLon = radLon - deltaLon;\n\n        if (minLon < MIN_LON_RAD) {\n          minLon += Geolib.PI_X2;\n        }\n\n        maxLon = radLon + deltaLon;\n\n        if (maxLon > MAX_LON_RAD) {\n          maxLon -= Geolib.PI_X2;\n        }\n      } else {\n        // A pole is within the distance.\n        minLat = Math.max(minLat, MIN_LAT_RAD);\n        maxLat = Math.min(maxLat, MAX_LAT_RAD);\n        minLon = MIN_LON_RAD;\n        maxLon = MAX_LON_RAD;\n      }\n\n      return [// Southwest\n      {\n        latitude: minLat.toDeg(),\n        longitude: minLon.toDeg()\n      }, // Northeast\n      {\n        latitude: maxLat.toDeg(),\n        longitude: maxLon.toDeg()\n      }];\n    },\n\n    /**\n    * Checks whether a point is inside of a polygon or not.\n    * Note that the polygon coords must be in correct order!\n    *\n    * @param        object      coordinate to check e.g. {latitude: 51.5023, longitude: 7.3815}\n    * @param        array       array with coords e.g. [{latitude: 51.5143, longitude: 7.4138}, {latitude: 123, longitude: 123}, ...]\n    * @return       bool        true if the coordinate is inside the given polygon\n    */\n    isPointInside: function isPointInside(latlng, coords) {\n      for (var c = false, i = -1, l = coords.length, j = l - 1; ++i < l; j = i) {\n        if ((this.longitude(coords[i]) <= this.longitude(latlng) && this.longitude(latlng) < this.longitude(coords[j]) || this.longitude(coords[j]) <= this.longitude(latlng) && this.longitude(latlng) < this.longitude(coords[i])) && this.latitude(latlng) < (this.latitude(coords[j]) - this.latitude(coords[i])) * (this.longitude(latlng) - this.longitude(coords[i])) / (this.longitude(coords[j]) - this.longitude(coords[i])) + this.latitude(coords[i])) {\n          c = !c;\n        }\n      }\n\n      return c;\n    },\n\n    /**\n     * Pre calculate the polygon coords, to speed up the point inside check.\n     * Use this function before calling isPointInsideWithPreparedPolygon()\n     * @see          Algorythm from http://alienryderflex.com/polygon/\n     * @param        array       array with coords e.g. [{latitude: 51.5143, longitude: 7.4138}, {latitude: 123, longitude: 123}, ...]\n     */\n    preparePolygonForIsPointInsideOptimized: function preparePolygonForIsPointInsideOptimized(coords) {\n      for (var i = 0, j = coords.length - 1; i < coords.length; i++) {\n        if (this.longitude(coords[j]) === this.longitude(coords[i])) {\n          coords[i].constant = this.latitude(coords[i]);\n          coords[i].multiple = 0;\n        } else {\n          coords[i].constant = this.latitude(coords[i]) - this.longitude(coords[i]) * this.latitude(coords[j]) / (this.longitude(coords[j]) - this.longitude(coords[i])) + this.longitude(coords[i]) * this.latitude(coords[i]) / (this.longitude(coords[j]) - this.longitude(coords[i]));\n          coords[i].multiple = (this.latitude(coords[j]) - this.latitude(coords[i])) / (this.longitude(coords[j]) - this.longitude(coords[i]));\n        }\n\n        j = i;\n      }\n    },\n\n    /**\n     * Checks whether a point is inside of a polygon or not.\n     * \"This is useful if you have many points that need to be tested against the same (static) polygon.\"\n     * Please call the function preparePolygonForIsPointInsideOptimized() with the same coords object before using this function.\n     * Note that the polygon coords must be in correct order!\n     *\n     * @see          Algorythm from http://alienryderflex.com/polygon/\n     *\n     * @param     object      coordinate to check e.g. {latitude: 51.5023, longitude: 7.3815}\n     * @param     array       array with coords e.g. [{latitude: 51.5143, longitude: 7.4138}, {latitude: 123, longitude: 123}, ...]\n     * @return        bool        true if the coordinate is inside the given polygon\n     */\n    isPointInsideWithPreparedPolygon: function isPointInsideWithPreparedPolygon(point, coords) {\n      var flgPointInside = false,\n          y = this.longitude(point),\n          x = this.latitude(point);\n\n      for (var i = 0, j = coords.length - 1; i < coords.length; i++) {\n        if (this.longitude(coords[i]) < y && this.longitude(coords[j]) >= y || this.longitude(coords[j]) < y && this.longitude(coords[i]) >= y) {\n          flgPointInside ^= y * coords[i].multiple + coords[i].constant < x;\n        }\n\n        j = i;\n      }\n\n      return flgPointInside;\n    },\n\n    /**\n    * Shortcut for geolib.isPointInside()\n    */\n    isInside: function isInside() {\n      return this.isPointInside.apply(this, arguments);\n    },\n\n    /**\n    * Checks whether a point is inside of a circle or not.\n    *\n    * @param        object      coordinate to check (e.g. {latitude: 51.5023, longitude: 7.3815})\n    * @param        object      coordinate of the circle's center (e.g. {latitude: 51.4812, longitude: 7.4025})\n    * @param        integer     maximum radius in meters\n    * @return       bool        true if the coordinate is within the given radius\n    */\n    isPointInCircle: function isPointInCircle(latlng, center, radius) {\n      return this.getDistance(latlng, center) < radius;\n    },\n\n    /**\n    * Shortcut for geolib.isPointInCircle()\n    */\n    withinRadius: function withinRadius() {\n      return this.isPointInCircle.apply(this, arguments);\n    },\n\n    /**\n    * Gets rhumb line bearing of two points. Find out about the difference between rhumb line and\n    * great circle bearing on Wikipedia. It's quite complicated. Rhumb line should be fine in most cases:\n    *\n    * http://en.wikipedia.org/wiki/Rhumb_line#General_and_mathematical_description\n    *\n    * Function heavily based on Doug Vanderweide's great PHP version (licensed under GPL 3.0)\n    * http://www.dougv.com/2009/07/13/calculating-the-bearing-and-compass-rose-direction-between-two-latitude-longitude-coordinates-in-php/\n    *\n    * @param        object      origin coordinate (e.g. {latitude: 51.5023, longitude: 7.3815})\n    * @param        object      destination coordinate\n    * @return       integer     calculated bearing\n    */\n    getRhumbLineBearing: function getRhumbLineBearing(originLL, destLL) {\n      // difference of longitude coords\n      var diffLon = this.longitude(destLL).toRad() - this.longitude(originLL).toRad(); // difference latitude coords phi\n\n      var diffPhi = Math.log(Math.tan(this.latitude(destLL).toRad() / 2 + Geolib.PI_DIV4) / Math.tan(this.latitude(originLL).toRad() / 2 + Geolib.PI_DIV4)); // recalculate diffLon if it is greater than pi\n\n      if (Math.abs(diffLon) > Math.PI) {\n        if (diffLon > 0) {\n          diffLon = (Geolib.PI_X2 - diffLon) * -1;\n        } else {\n          diffLon = Geolib.PI_X2 + diffLon;\n        }\n      } //return the angle, normalized\n\n\n      return (Math.atan2(diffLon, diffPhi).toDeg() + 360) % 360;\n    },\n\n    /**\n    * Gets great circle bearing of two points. See description of getRhumbLineBearing for more information\n    *\n    * @param        object      origin coordinate (e.g. {latitude: 51.5023, longitude: 7.3815})\n    * @param        object      destination coordinate\n    * @return       integer     calculated bearing\n    */\n    getBearing: function getBearing(originLL, destLL) {\n      destLL['latitude'] = this.latitude(destLL);\n      destLL['longitude'] = this.longitude(destLL);\n      originLL['latitude'] = this.latitude(originLL);\n      originLL['longitude'] = this.longitude(originLL);\n      var bearing = (Math.atan2(Math.sin(destLL['longitude'].toRad() - originLL['longitude'].toRad()) * Math.cos(destLL['latitude'].toRad()), Math.cos(originLL['latitude'].toRad()) * Math.sin(destLL['latitude'].toRad()) - Math.sin(originLL['latitude'].toRad()) * Math.cos(destLL['latitude'].toRad()) * Math.cos(destLL['longitude'].toRad() - originLL['longitude'].toRad())).toDeg() + 360) % 360;\n      return bearing;\n    },\n\n    /**\n    * Gets the compass direction from an origin coordinate to a destination coordinate.\n    *\n    * @param        object      origin coordinate (e.g. {latitude: 51.5023, longitude: 7.3815})\n    * @param        object      destination coordinate\n    * @param        string      Bearing mode. Can be either circle or rhumbline\n    * @return       object      Returns an object with a rough (NESW) and an exact direction (NNE, NE, ENE, E, ESE, etc).\n    */\n    getCompassDirection: function getCompassDirection(originLL, destLL, bearingMode) {\n      var direction;\n      var bearing;\n\n      if (bearingMode == 'circle') {\n        // use great circle bearing\n        bearing = this.getBearing(originLL, destLL);\n      } else {\n        // default is rhumb line bearing\n        bearing = this.getRhumbLineBearing(originLL, destLL);\n      }\n\n      switch (Math.round(bearing / 22.5)) {\n        case 1:\n          direction = {\n            exact: \"NNE\",\n            rough: \"N\"\n          };\n          break;\n\n        case 2:\n          direction = {\n            exact: \"NE\",\n            rough: \"N\"\n          };\n          break;\n\n        case 3:\n          direction = {\n            exact: \"ENE\",\n            rough: \"E\"\n          };\n          break;\n\n        case 4:\n          direction = {\n            exact: \"E\",\n            rough: \"E\"\n          };\n          break;\n\n        case 5:\n          direction = {\n            exact: \"ESE\",\n            rough: \"E\"\n          };\n          break;\n\n        case 6:\n          direction = {\n            exact: \"SE\",\n            rough: \"E\"\n          };\n          break;\n\n        case 7:\n          direction = {\n            exact: \"SSE\",\n            rough: \"S\"\n          };\n          break;\n\n        case 8:\n          direction = {\n            exact: \"S\",\n            rough: \"S\"\n          };\n          break;\n\n        case 9:\n          direction = {\n            exact: \"SSW\",\n            rough: \"S\"\n          };\n          break;\n\n        case 10:\n          direction = {\n            exact: \"SW\",\n            rough: \"S\"\n          };\n          break;\n\n        case 11:\n          direction = {\n            exact: \"WSW\",\n            rough: \"W\"\n          };\n          break;\n\n        case 12:\n          direction = {\n            exact: \"W\",\n            rough: \"W\"\n          };\n          break;\n\n        case 13:\n          direction = {\n            exact: \"WNW\",\n            rough: \"W\"\n          };\n          break;\n\n        case 14:\n          direction = {\n            exact: \"NW\",\n            rough: \"W\"\n          };\n          break;\n\n        case 15:\n          direction = {\n            exact: \"NNW\",\n            rough: \"N\"\n          };\n          break;\n\n        default:\n          direction = {\n            exact: \"N\",\n            rough: \"N\"\n          };\n      }\n\n      direction['bearing'] = bearing;\n      return direction;\n    },\n\n    /**\n    * Shortcut for getCompassDirection\n    */\n    getDirection: function getDirection(originLL, destLL, bearingMode) {\n      return this.getCompassDirection.apply(this, arguments);\n    },\n\n    /**\n    * Sorts an array of coords by distance from a reference coordinate\n    *\n    * @param        object      reference coordinate e.g. {latitude: 51.5023, longitude: 7.3815}\n    * @param        mixed       array or object with coords [{latitude: 51.5143, longitude: 7.4138}, {latitude: 123, longitude: 123}, ...]\n    * @return       array       ordered array\n    */\n    orderByDistance: function orderByDistance(latlng, coords) {\n      var coordsArray = Object.keys(coords).map(function (idx) {\n        var distance = this.getDistance(latlng, coords[idx]);\n        var augmentedCoord = Object.create(coords[idx]);\n        augmentedCoord.distance = distance;\n        augmentedCoord.key = idx;\n        return augmentedCoord;\n      }, this);\n      return coordsArray.sort(function (a, b) {\n        return a.distance - b.distance;\n      });\n    },\n\n    /**\n    * Check if a point lies in line created by two other points\n    *\n    * @param    object    Point to check: {latitude: 123, longitude: 123}\n    * @param    object    Start of line {latitude: 123, longitude: 123}\n    * @param    object    End of line {latitude: 123, longitude: 123}\n    * @return   boolean\n    */\n    isPointInLine: function isPointInLine(point, start, end) {\n      return (this.getDistance(start, point, 1, 3) + this.getDistance(point, end, 1, 3)).toFixed(3) == this.getDistance(start, end, 1, 3);\n    },\n\n    /**\n    * Check if a point lies within a given distance from a line created by two other points\n    *\n    * @param    object    Point to check: {latitude: 123, longitude: 123}\n    * @param    object    Start of line {latitude: 123, longitude: 123}\n    * @param    object    End of line {latitude: 123, longitude: 123}\n    * @pararm   float     maximum distance from line\n    * @return   boolean\n    */\n    isPointNearLine: function isPointNearLine(point, start, end, distance) {\n      return this.getDistanceFromLine(point, start, end) < distance;\n    },\n\n    /**\n    * return the minimum distance from a point to a line\n    *\n    * @param    object    Point away from line\n    * @param    object    Start of line {latitude: 123, longitude: 123}\n    * @param    object    End of line {latitude: 123, longitude: 123}\n    * @return   float     distance from point to line\n    */\n    getDistanceFromLine: function getDistanceFromLine(point, start, end) {\n      var d1 = this.getDistance(start, point, 1, 3);\n      var d2 = this.getDistance(point, end, 1, 3);\n      var d3 = this.getDistance(start, end, 1, 3);\n      var distance = 0; // alpha is the angle between the line from start to point, and from start to end //\n\n      var alpha = Math.acos((d1 * d1 + d3 * d3 - d2 * d2) / (2 * d1 * d3)); // beta is the angle between the line from end to point and from end to start //\n\n      var beta = Math.acos((d2 * d2 + d3 * d3 - d1 * d1) / (2 * d2 * d3)); // if the angle is greater than 90 degrees, then the minimum distance is the\n      // line from the start to the point //\n\n      if (alpha > Math.PI / 2) {\n        distance = d1;\n      } // same for the beta //\n      else if (beta > Math.PI / 2) {\n          distance = d2;\n        } // otherwise the minimum distance is achieved through a line perpendular to the start-end line,\n        // which goes from the start-end line to the point //\n        else {\n            distance = Math.sin(alpha) * d1;\n          }\n\n      return distance;\n    },\n\n    /**\n    * Finds the nearest coordinate to a reference coordinate\n    *\n    * @param        object      reference coordinate e.g. {latitude: 51.5023, longitude: 7.3815}\n    * @param        mixed       array or object with coords [{latitude: 51.5143, longitude: 7.4138}, {latitude: 123, longitude: 123}, ...]\n    * @return       array       ordered array\n    */\n    findNearest: function findNearest(latlng, coords, offset, limit) {\n      offset = offset || 0;\n      limit = limit || 1;\n      var ordered = this.orderByDistance(latlng, coords);\n\n      if (limit === 1) {\n        return ordered[offset];\n      } else {\n        return ordered.splice(offset, limit);\n      }\n    },\n\n    /**\n    * Calculates the length of a given path\n    *\n    * @param        mixed       array or object with coords [{latitude: 51.5143, longitude: 7.4138}, {latitude: 123, longitude: 123}, ...]\n    * @return       integer     length of the path (in meters)\n    */\n    getPathLength: function getPathLength(coords) {\n      var dist = 0;\n      var last;\n\n      for (var i = 0, l = coords.length; i < l; ++i) {\n        if (last) {\n          //console.log(coords[i], last, this.getDistance(coords[i], last));\n          dist += this.getDistance(this.coords(coords[i]), last);\n        }\n\n        last = this.coords(coords[i]);\n      }\n\n      return dist;\n    },\n\n    /**\n    * Calculates the speed between to points within a given time span.\n    *\n    * @param        object      coords with javascript timestamp {latitude: 51.5143, longitude: 7.4138, time: 1360231200880}\n    * @param        object      coords with javascript timestamp {latitude: 51.5502, longitude: 7.4323, time: 1360245600460}\n    * @param        object      options (currently \"unit\" is the only option. Default: km(h));\n    * @return       float       speed in unit per hour\n    */\n    getSpeed: function getSpeed(start, end, options) {\n      var unit = options && options.unit || 'km';\n\n      if (unit == 'mph') {\n        unit = 'mi';\n      } else if (unit == 'kmh') {\n        unit = 'km';\n      }\n\n      var distance = geolib.getDistance(start, end);\n      var time = end.time * 1 / 1000 - start.time * 1 / 1000;\n      var mPerHr = distance / time * 3600;\n      var speed = Math.round(mPerHr * this.measures[unit] * 10000) / 10000;\n      return speed;\n    },\n\n    /**\n     * Computes the destination point given an initial point, a distance\n     * and a bearing\n     *\n     * see http://www.movable-type.co.uk/scripts/latlong.html for the original code\n     *\n     * @param        object     start coordinate (e.g. {latitude: 51.5023, longitude: 7.3815})\n     * @param        float      longitude of the inital point in degree\n     * @param        float      distance to go from the inital point in meter\n     * @param        float      bearing in degree of the direction to go, e.g. 0 = north, 180 = south\n     * @param        float      optional (in meter), defaults to mean radius of the earth\n     * @return       object     {latitude: destLat (in degree), longitude: destLng (in degree)}\n     */\n    computeDestinationPoint: function computeDestinationPoint(start, distance, bearing, radius) {\n      var lat = this.latitude(start);\n      var lng = this.longitude(start);\n      radius = typeof radius === 'undefined' ? this.radius : Number(radius);\n      var δ = Number(distance) / radius; // angular distance in radians\n\n      var θ = Number(bearing).toRad();\n      var φ1 = Number(lat).toRad();\n      var λ1 = Number(lng).toRad();\n      var φ2 = Math.asin(Math.sin(φ1) * Math.cos(δ) + Math.cos(φ1) * Math.sin(δ) * Math.cos(θ));\n      var λ2 = λ1 + Math.atan2(Math.sin(θ) * Math.sin(δ) * Math.cos(φ1), Math.cos(δ) - Math.sin(φ1) * Math.sin(φ2));\n      λ2 = (λ2 + 3 * Math.PI) % (2 * Math.PI) - Math.PI; // normalise to -180..+180°\n\n      return {\n        latitude: φ2.toDeg(),\n        longitude: λ2.toDeg()\n      };\n    },\n\n    /**\n    * Converts a distance from meters to km, mm, cm, mi, ft, in or yd\n    *\n    * @param        string      Format to be converted in\n    * @param        float       Distance in meters\n    * @param        float       Decimal places for rounding (default: 4)\n    * @return       float       Converted distance\n    */\n    convertUnit: function convertUnit(unit, distance, round) {\n      if (distance === 0) {\n        return 0;\n      } else if (typeof distance === 'undefined') {\n        if (this.distance === null) {\n          throw new Error('No distance was given');\n        } else if (this.distance === 0) {\n          return 0;\n        } else {\n          distance = this.distance;\n        }\n      }\n\n      unit = unit || 'm';\n      round = null == round ? 4 : round;\n\n      if (typeof this.measures[unit] !== 'undefined') {\n        return this.round(distance * this.measures[unit], round);\n      } else {\n        throw new Error('Unknown unit for conversion.');\n      }\n    },\n\n    /**\n    * Checks if a value is in decimal format or, if neccessary, converts to decimal\n    *\n    * @param        mixed       Value(s) to be checked/converted (array of latlng objects, latlng object, sexagesimal string, float)\n    * @return       float       Input data in decimal format\n    */\n    useDecimal: function useDecimal(value) {\n      if (Object.prototype.toString.call(value) === '[object Array]') {\n        var geolib = this;\n        value = value.map(function (val) {\n          //if(!isNaN(parseFloat(val))) {\n          if (geolib.isDecimal(val)) {\n            return geolib.useDecimal(val);\n          } else if (typeof val == 'object') {\n            if (geolib.validate(val)) {\n              return geolib.coords(val);\n            } else {\n              for (var prop in val) {\n                val[prop] = geolib.useDecimal(val[prop]);\n              }\n\n              return val;\n            }\n          } else if (geolib.isSexagesimal(val)) {\n            return geolib.sexagesimal2decimal(val);\n          } else {\n            return val;\n          }\n        });\n        return value;\n      } else if (typeof value === 'object' && this.validate(value)) {\n        return this.coords(value);\n      } else if (typeof value === 'object') {\n        for (var prop in value) {\n          value[prop] = this.useDecimal(value[prop]);\n        }\n\n        return value;\n      }\n\n      if (this.isDecimal(value)) {\n        return parseFloat(value);\n      } else if (this.isSexagesimal(value) === true) {\n        return parseFloat(this.sexagesimal2decimal(value));\n      }\n\n      throw new Error('Unknown format.');\n    },\n\n    /**\n    * Converts a decimal coordinate value to sexagesimal format\n    *\n    * @param        float       decimal\n    * @return       string      Sexagesimal value (XX° YY' ZZ\")\n    */\n    decimal2sexagesimal: function decimal2sexagesimal(dec) {\n      if (dec in this.sexagesimal) {\n        return this.sexagesimal[dec];\n      }\n\n      var tmp = dec.toString().split('.');\n      var deg = Math.abs(tmp[0]);\n      var min = ('0.' + (tmp[1] || 0)) * 60;\n      var sec = min.toString().split('.');\n      min = Math.floor(min);\n      sec = (('0.' + (sec[1] || 0)) * 60).toFixed(2);\n      this.sexagesimal[dec] = deg + '° ' + min + \"' \" + sec + '\"';\n      return this.sexagesimal[dec];\n    },\n\n    /**\n    * Converts a sexagesimal coordinate to decimal format\n    *\n    * @param        float       Sexagesimal coordinate\n    * @return       string      Decimal value (XX.XXXXXXXX)\n    */\n    sexagesimal2decimal: function sexagesimal2decimal(sexagesimal) {\n      if (sexagesimal in this.decimal) {\n        return this.decimal[sexagesimal];\n      }\n\n      var regEx = new RegExp(this.sexagesimalPattern);\n      var data = regEx.exec(sexagesimal);\n      var min = 0,\n          sec = 0;\n\n      if (data) {\n        min = parseFloat(data[2] / 60);\n        sec = parseFloat(data[4] / 3600) || 0;\n      }\n\n      var dec = (parseFloat(data[1]) + min + sec).toFixed(8); //var   dec = ((parseFloat(data[1]) + min + sec));\n      // South and West are negative decimals\n\n      dec = data[7] == 'S' || data[7] == 'W' ? parseFloat(-dec) : parseFloat(dec); //dec = (data[7] == 'S' || data[7] == 'W') ? -dec : dec;\n\n      this.decimal[sexagesimal] = dec;\n      return dec;\n    },\n\n    /**\n    * Checks if a value is in decimal format\n    *\n    * @param        string      Value to be checked\n    * @return       bool        True if in sexagesimal format\n    */\n    isDecimal: function isDecimal(value) {\n      value = value.toString().replace(/\\s*/, ''); // looks silly but works as expected\n      // checks if value is in decimal format\n\n      return !isNaN(parseFloat(value)) && parseFloat(value) == value;\n    },\n\n    /**\n    * Checks if a value is in sexagesimal format\n    *\n    * @param        string      Value to be checked\n    * @return       bool        True if in sexagesimal format\n    */\n    isSexagesimal: function isSexagesimal(value) {\n      value = value.toString().replace(/\\s*/, '');\n      return this.sexagesimalPattern.test(value);\n    },\n    round: function round(value, n) {\n      var decPlace = Math.pow(10, n);\n      return Math.round(value * decPlace) / decPlace;\n    }\n  }); // Node module\n\n  if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n    module.exports = geolib; // react native\n\n    if (typeof global === 'object') {\n      global.geolib = geolib;\n    } // AMD module\n\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"geolib\", [], function () {\n      return geolib;\n    }); // we're in a browser\n  } else {\n    global.geolib = geolib;\n  }\n})(this);","map":null,"metadata":{},"sourceType":"script"}