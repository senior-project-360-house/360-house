{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\nguye\\\\Downloads\\\\New folder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\nguye\\\\Downloads\\\\New folder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\nguye\\\\Downloads\\\\New folder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\nguye\\\\Downloads\\\\New folder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\nguye\\\\Downloads\\\\New folder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\nguye\\\\Downloads\\\\New folder\\\\src\\\\server\\\\Session\\\\withEmailVerification.js\";\nimport React from 'react';\nimport AuthUserContext from './context';\nimport { withFirebase } from '../Firebase/index'; //If true, tell user to verify email, instead of render the Component that passed to this higher-order component\n\nvar needsEmailVerification = function needsEmailVerification(authUser) {\n  return authUser && !authUser.emailVerified && authUser.providerData.map(function (provider) {\n    return provider.providerId;\n  }).includes('password');\n};\n/*\nprotect routes from user who have not verified email address yet.\n*/\n\n\nvar withEmailVerification = function withEmailVerification(Component) {\n  var WithEmailVerification =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inherits(WithEmailVerification, _React$Component);\n\n    function WithEmailVerification(props) {\n      var _this;\n\n      _classCallCheck(this, WithEmailVerification);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(WithEmailVerification).call(this, props));\n\n      _this.onSendEmailVerification = function () {\n        _this.props.firebase.doSendEmailVerification().then(function () {\n          return _this.setState({\n            isSent: true\n          });\n        });\n      };\n\n      _this.state = {\n        isSent: false\n      };\n      return _this;\n    }\n\n    _createClass(WithEmailVerification, [{\n      key: \"render\",\n      value: function render() {\n        var _this2 = this;\n\n        return React.createElement(AuthUserContext.Consumer, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        }, function (authUser) {\n          return needsEmailVerification(authUser) ? React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 34\n            },\n            __self: this\n          },\n          /*\n          check if the users already sent a new email confirmation\n          */\n          _this2.state.isSent ? React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 40\n            },\n            __self: this\n          }, \"E-Mail confirmation sent: Check you E-Mails (Spam folder included) for a confirmation E-Mail. Refresh this page once you confirmed your E-Mail.\") :\n          /*\n          check if the user want to sent a mail confirmation\n          */\n          React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 50\n            },\n            __self: this\n          }, \"Verify your E-Mail: Check you E-Mails (Spam folder included) for a confirmation E-Mail or send another confirmation E-Mail.\"), React.createElement(\"button\", {\n            type: \"button\",\n            onClick: _this2.onSendEmailVerification,\n            disabled: _this2.state.isSent,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 57\n            },\n            __self: this\n          }, \"Send Confirm email\")) :\n          /*\n          if no condition meet process to logged in page\n          */\n          React.createElement(Component, Object.assign({}, _this2.props, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 68\n            },\n            __self: this\n          }));\n        });\n      }\n    }]);\n\n    return WithEmailVerification;\n  }(React.Component);\n\n  return withFirebase(WithEmailVerification);\n};\n\nexport default withEmailVerification;","map":{"version":3,"sources":["C:\\Users\\nguye\\Downloads\\New folder\\src\\server\\Session\\withEmailVerification.js"],"names":["React","AuthUserContext","withFirebase","needsEmailVerification","authUser","emailVerified","providerData","map","provider","providerId","includes","withEmailVerification","Component","WithEmailVerification","props","onSendEmailVerification","firebase","doSendEmailVerification","then","setState","isSent","state"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,eAAP,MAA4B,WAA5B;AACA,SAASC,YAAT,QAA6B,mBAA7B,C,CAEA;;AACA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAAC,QAAQ;AAAA,SACrCA,QAAQ,IAAI,CAACA,QAAQ,CAACC,aAAtB,IAAuCD,QAAQ,CAACE,YAAT,CACtCC,GADsC,CAClC,UAAAC,QAAQ;AAAA,WAAIA,QAAQ,CAACC,UAAb;AAAA,GAD0B,EAEtCC,QAFsC,CAE7B,UAF6B,CADF;AAAA,CAAvC;AAMA;;;;;AAGA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAAC,SAAS,EAAI;AAAA,MACnCC,qBADmC;AAAA;AAAA;AAAA;;AAEvC,mCAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AAChB,iGAAMA,KAAN;;AADgB,YAMlBC,uBANkB,GAMQ,YAAM;AAC9B,cAAKD,KAAL,CAAWE,QAAX,CAAoBC,uBAApB,GACCC,IADD,CACM;AAAA,iBAAM,MAAKC,QAAL,CAAc;AAACC,YAAAA,MAAM,EAAE;AAAT,WAAd,CAAN;AAAA,SADN;AAED,OATiB;;AAGhB,YAAKC,KAAL,GAAa;AAAED,QAAAA,MAAM,EAAE;AAAV,OAAb;AAHgB;AAIjB;;AANsC;AAAA;AAAA,+BAa9B;AAAA;;AACP,eACE,oBAAC,eAAD,CAAiB,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACC,UAAAhB,QAAQ;AAAA,iBACPD,sBAAsB,CAACC,QAAD,CAAtB,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEE;;;AAGA,UAAA,MAAI,CAACiB,KAAL,CAAWD,MAAX,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+JADF;AAOE;;;AAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2IAhBN,EAuBM;AACA,YAAA,IAAI,EAAC,QADL;AAEA,YAAA,OAAO,EAAE,MAAI,CAACL,uBAFd;AAGA,YAAA,QAAQ,EAAE,MAAI,CAACM,KAAL,CAAWD,MAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAvBN,CADF;AAgCM;;;AAGA,8BAAC,SAAD,oBAAe,MAAI,CAACN,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aApCC;AAAA,SADT,CADF;AA0CK;AAxDgC;;AAAA;AAAA,IACLd,KAAK,CAACY,SADD;;AA0DnC,SAAOV,YAAY,CAACW,qBAAD,CAAnB;AACD,CA3DP;;AA6DM,eAAeF,qBAAf","sourcesContent":["import React from 'react';\n\nimport AuthUserContext from './context';\nimport { withFirebase } from '../Firebase/index';\n\n//If true, tell user to verify email, instead of render the Component that passed to this higher-order component\nconst needsEmailVerification = authUser =>\n  authUser && !authUser.emailVerified && authUser.providerData\n  .map(provider => provider.providerId)\n  .includes('password');\n\n\n/*\nprotect routes from user who have not verified email address yet.\n*/\nconst withEmailVerification = Component => {\n  class WithEmailVerification extends React.Component {\n    constructor(props){\n      super(props);\n\n      this.state = { isSent: false};\n    }\n\n    onSendEmailVerification = () => {\n      this.props.firebase.doSendEmailVerification()\n      .then(() => this.setState({isSent: true}));\n    };\n\n    render() {\n      return (\n        <AuthUserContext.Consumer>\n        {authUser =>\n          needsEmailVerification(authUser) ? (\n            <div>\n            {\n              /*\n              check if the users already sent a new email confirmation\n              */\n              this.state.isSent ? (\n                <p>\n                E-Mail confirmation sent: Check you E-Mails (Spam\n                  folder included) for a confirmation E-Mail.\n                  Refresh this page once you confirmed your E-Mail.\n                  </p>\n                ) :\n                /*\n                check if the user want to sent a mail confirmation\n                */\n                (\n                  <p>\n                  Verify your E-Mail: Check you E-Mails (Spam folder\n                    included) for a confirmation E-Mail or send\n                    another confirmation E-Mail.\n                    </p>\n                  )}\n\n                  <button\n                  type=\"button\"\n                  onClick={this.onSendEmailVerification}\n                  disabled={this.state.isSent}>\n                  Send Confirm email\n                  </button>\n                  </div>\n                ) : (\n                /*\n                if no condition meet process to logged in page\n                */\n                <Component {...this.props} />)\n              }\n              </AuthUserContext.Consumer>\n            );\n          }\n        }\n        return withFirebase(WithEmailVerification);\n      };\n\n      export default withEmailVerification;\n"]},"metadata":{},"sourceType":"module"}