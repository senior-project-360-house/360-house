{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\nguye\\\\Downloads\\\\New folder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\nguye\\\\Downloads\\\\New folder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nimport 'firebase/firestore';\nimport Config from './config.js';\nvar config = Config;\n\nvar Firebase = function Firebase() {\n  var _this = this;\n\n  _classCallCheck(this, Firebase);\n\n  this.doCreateUserWithEmailAndPassword = function (email, password) {\n    return _this.auth.createUserWithEmailAndPassword(email, password);\n  };\n\n  this.doSignInWithEmailAndPassword = function (email, password) {\n    return _this.auth.signInWithEmailAndPassword(email, password);\n  };\n\n  this.doSignInWithGoogle = function () {\n    return _this.auth.signInWithPopup(_this.googleProvider);\n  };\n\n  this.doSignOut = function () {\n    return _this.auth.signOut();\n  };\n\n  this.doPasswordReset = function (email) {\n    return _this.auth.sendPasswordResetEmail(email);\n  };\n\n  this.doPasswordUpdate = function (password) {\n    return _this.auth.currentUser.updatePassword(password);\n  };\n\n  this.doEmailUpdate = function (email) {\n    return _this.auth.currentUser.updateEmail(email);\n  };\n\n  this.doUpdateProfile = function (data) {\n    return _this.user(_this.auth.currentUser.uid).set(data);\n  };\n\n  this.user = function (uid) {\n    return _this.database.ref(\"users/\".concat(uid));\n  };\n\n  this.users = function () {\n    return _this.database.ref('users');\n  };\n\n  this.house = function (uid) {\n    return _this.database.ref(\"houses/\".concat(uid));\n  };\n\n  this.houses = function () {\n    return _this.database.ref('houses');\n  };\n\n  this.imgItems = function () {\n    return _this.database.ref('itemImg');\n  };\n\n  this.authU = function () {\n    return _this.auth.currentUser;\n  };\n\n  this.doSendEmailVerification = function () {\n    return _this.auth.currentUser.sendEmailVerification({\n      url: config.url\n    });\n  };\n\n  this.storageRef = function () {\n    return _this.storage.ref('images');\n  };\n\n  this.onAuthUserListener = function (next, fallback) {\n    return _this.auth.onAuthStateChanged(function (authUser) {\n      if (authUser) {\n        _this.user(authUser.uid).once('value').then(function (snapshot) {\n          var dbUser = snapshot.val(); //default empty roles\n\n          if (!dbUser.roles) {\n            dbUser.roles = [];\n          } //merge auth and db user\n\n\n          authUser = _objectSpread({\n            uid: authUser.uid,\n            email: authUser.email,\n            //Check if the user has a verified email\n            emailVerified: authUser.emailVerified,\n            providerData: authUser.providerData\n          }, dbUser);\n          next(authUser);\n        });\n      } else {\n        fallback();\n      }\n    });\n  };\n\n  this.request_view = function (uid) {\n    return _this.firestore.collection(\"viewRequest\").doc(uid);\n  };\n\n  this.request_views = function () {\n    return _this.firestore.collection(\"viewRequest\");\n  };\n\n  this.addRequestView = function (request_data, agent_id) {\n    _this.request_views().add(request_data).then(function (snapshot) {\n      _this.user(agent_id).once('value').then(function (usersnapshot) {\n        var updates = {};\n        var oldReviewList = usersnapshot.val().reviewList || [];\n        console.log(oldReviewList);\n        oldReviewList.push(snapshot.id);\n        updates[\"users/\".concat(agent_id) + '/reviewList'] = oldReviewList;\n\n        _this.database.ref().update(updates);\n\n        console.log(\"Successfully add request view\");\n      });\n    }).catch(function (error) {\n      return error;\n    });\n  };\n\n  this.getReviewList = function (agent_id) {\n    return _this.user(agent_id).once('value').then(function (snapshot) {\n      var reviewIDList = [];\n\n      if (snapshot.val().reviewList) {\n        reviewIDList = reviewIDList.concat(snapshot.val().reviewList);\n      }\n\n      console.log(reviewIDList);\n      var reviewList = [];\n      var promise = [];\n      reviewIDList.forEach(function (reviewID) {\n        return promise.push(_this.request_view(reviewID).get());\n      });\n      return Promise.all(promise).then(function (snapshots) {\n        snapshots.forEach(function (snapshot) {\n          var obj = _objectSpread({\n            id: snapshot.id\n          }, snapshot.data());\n\n          reviewList.push(obj);\n        });\n        return reviewList;\n      });\n      return reviewList;\n    });\n  };\n\n  app.initializeApp(config); //Get the Provider of user email (Google, Facebook, ...)\n\n  this.emailAuthProvider = app.auth.EmailAuthProvider; //Initialize firebase authentication\n\n  this.auth = app.auth(); //Initialize firebase database\n\n  this.database = app.database(); //Initialize firebase provider\n\n  this.googleProvider = new app.auth.GoogleAuthProvider();\n  this.firestore = app.firestore(); //firebase storage\n\n  this.storage = app.storage();\n} // Auth API\n//Sign Up with Email\n;\n\nexport default Firebase;","map":{"version":3,"sources":["C:\\Users\\nguye\\Downloads\\New folder\\src\\server\\Firebase\\firebase.js"],"names":["app","Config","config","Firebase","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignInWithGoogle","signInWithPopup","googleProvider","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","currentUser","updatePassword","doEmailUpdate","updateEmail","doUpdateProfile","data","user","uid","set","database","ref","users","house","houses","imgItems","authU","doSendEmailVerification","sendEmailVerification","url","storageRef","storage","onAuthUserListener","next","fallback","onAuthStateChanged","authUser","once","then","snapshot","dbUser","val","roles","emailVerified","providerData","request_view","firestore","collection","doc","request_views","addRequestView","request_data","agent_id","add","usersnapshot","updates","oldReviewList","reviewList","console","log","push","id","update","catch","error","getReviewList","reviewIDList","concat","promise","forEach","reviewID","get","Promise","all","snapshots","obj","initializeApp","emailAuthProvider","EmailAuthProvider","GoogleAuthProvider"],"mappings":"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","sourcesContent":["import app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nimport 'firebase/firestore';\nimport Config from './config.js';\n\n\nconst config = Config;\n\nclass Firebase {\n    constructor() {\n        app.initializeApp(config);\n        //Get the Provider of user email (Google, Facebook, ...)\n        this.emailAuthProvider = app.auth.EmailAuthProvider;\n        //Initialize firebase authentication\n        this.auth = app.auth();\n        //Initialize firebase database\n        this.database = app.database();\n        //Initialize firebase provider\n        this.googleProvider = new app.auth.GoogleAuthProvider();\n\n        this.firestore = app.firestore();\n\n        //firebase storage\n        this.storage = app.storage();\n    }\n\n\n    // Auth API\n\n    //Sign Up with Email\n    doCreateUserWithEmailAndPassword = (email, password) =>\n        this.auth.createUserWithEmailAndPassword(email, password);\n    //Sign In with Email\n    doSignInWithEmailAndPassword = (email, password) =>\n        this.auth.signInWithEmailAndPassword(email, password);\n\n    //Sign In with Google Account\n    //Note that if use another social logins, they must be join together\n    //so the account do not conflict\n    doSignInWithGoogle = () =>\n        this.auth.signInWithPopup(this.googleProvider);\n\n    //Sign Out\n    doSignOut = () => this.auth.signOut();\n    //Password Forgot\n    doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n    //Password Update\n    doPasswordUpdate = password =>\n        this.auth.currentUser.updatePassword(password);\n\n    //email updated\n    doEmailUpdate = email =>\n        this.auth.currentUser.updateEmail(email);\n\n    //User's profile updateProfile\n    doUpdateProfile = data => this.user(this.auth.currentUser.uid).set(data);\n\n\n    //adding new house\n\n\n    // User API\n    user = uid => this.database.ref(`users/${uid}`);\n\n    users = () => this.database.ref('users');\n\n    //House API\n\n    house = uid => this.database.ref(`houses/${uid}`);\n\n    houses = () => this.database.ref('houses');\n\n    //image\n    imgItems = () => this.database.ref('itemImg');\n\n\n    //currentEmail\n    authU = () => this.auth.currentUser;\n\n\n    // Sign Up Email Verification\n\n    doSendEmailVerification = () =>\n        this.auth.currentUser.sendEmailVerification({ url: config.url });\n\n\n    storageRef = () => this.storage.ref('images');\n\n    /*\n    Athorization and Authentication join method\n    Merge AUth and DB User API\n    */\n    onAuthUserListener = (next, fallback) =>\n        this.auth.onAuthStateChanged(authUser => {\n            if (authUser) {\n                this.user(authUser.uid)\n                    .once('value')\n                    .then(snapshot => {\n                        const dbUser = snapshot.val();\n\n                        //default empty roles\n                        if (!dbUser.roles) {\n                            dbUser.roles = [];\n                        }\n\n                        //merge auth and db user\n                        authUser = {\n                            uid: authUser.uid,\n                            email: authUser.email,\n                            //Check if the user has a verified email\n                            emailVerified: authUser.emailVerified,\n                            providerData: authUser.providerData,\n                            ...dbUser,\n                        };\n                        next(authUser);\n                    });\n            } else {\n                fallback();\n            }\n        });\n        request_view = uid => this.firestore.collection(\"viewRequest\").doc(uid);\n\n\t\trequest_views = () => this.firestore.collection(\"viewRequest\");\n\n\t\taddRequestView = (request_data, agent_id) => {\n\t\t\tthis.request_views()\n\t\t\t\t.add(request_data)\n\t\t\t\t.then((snapshot) => {\n\t\t\t\t\tthis.user(agent_id).once('value').then(usersnapshot => {\n\t\t\t\t\t\tlet updates = {};\n                        const oldReviewList = usersnapshot.val().reviewList || [];\n                        console.log(oldReviewList);\n\t\t\t\t\t\toldReviewList.push(snapshot.id);\n\t\t\t\t\t\tupdates[`users/${agent_id}`+'/reviewList'] = oldReviewList;\n\t\t\t\t\t\tthis.database.ref().update(updates);\n\t\t\t\t\t\tconsole.log(\"Successfully add request view\");\n\t\t\t\t\t});\n\t\t\t\t})\n            \t.catch(error => error);\n\t\t};\n\n\t\tgetReviewList = agent_id => {\n\t\t\treturn this.user(agent_id).once('value').then(snapshot => {\n\t\t\t\tlet reviewIDList = [];\n\t\t\t\tif(snapshot.val().reviewList){\n\t\t\t\t\treviewIDList = reviewIDList.concat(snapshot.val().reviewList);\n                }\n                console.log(reviewIDList);\n                let reviewList = [];\n                let promise = [];\n                reviewIDList.forEach(reviewID => promise.push(this.request_view(reviewID).get()));\n                return Promise.all(promise).then(snapshots => {\n                    snapshots.forEach( snapshot => {\n                        const obj = {\n                            id: snapshot.id,\n                            ...snapshot.data()\n                        }\n                        reviewList.push(obj);\n                    });\n                    return reviewList;\n                })\n\n\n\t\t\t\treturn reviewList;\n\t\t\t})\n\t\t}\n\n\n}\n\nexport default Firebase;\n"]},"metadata":{},"sourceType":"module"}