{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\nguye\\\\Downloads\\\\New folder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\nguye\\\\Downloads\\\\New folder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\nguye\\\\Downloads\\\\New folder\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport $ from 'jquery';\nimport Util from './util';\nvar NAME = 'metisMenu';\nvar DATA_KEY = 'metisMenu';\nvar EVENT_KEY = \".\".concat(DATA_KEY);\nvar DATA_API_KEY = '.data-api';\nvar JQUERY_NO_CONFLICT = $.fn[NAME];\nvar TRANSITION_DURATION = 350;\nvar Default = {\n  toggle: true,\n  preventDefault: true,\n  triggerElement: 'a',\n  parentTrigger: 'li',\n  subMenu: 'ul'\n};\nvar Event = {\n  SHOW: \"show\".concat(EVENT_KEY),\n  SHOWN: \"shown\".concat(EVENT_KEY),\n  HIDE: \"hide\".concat(EVENT_KEY),\n  HIDDEN: \"hidden\".concat(EVENT_KEY),\n  CLICK_DATA_API: \"click\".concat(EVENT_KEY).concat(DATA_API_KEY)\n};\nvar ClassName = {\n  METIS: 'metismenu',\n  ACTIVE: 'mm-active',\n  SHOW: 'mm-show',\n  COLLAPSE: 'mm-collapse',\n  COLLAPSING: 'mm-collapsing',\n  COLLAPSED: 'mm-collapsed'\n};\n\nvar MetisMenu =\n/*#__PURE__*/\nfunction () {\n  // eslint-disable-line no-shadow\n  function MetisMenu(element, config) {\n    _classCallCheck(this, MetisMenu);\n\n    this.element = element;\n    this.config = _objectSpread({}, Default, config);\n    this.transitioning = null;\n    this.init();\n  }\n\n  _createClass(MetisMenu, [{\n    key: \"init\",\n    value: function init() {\n      var self = this;\n      var conf = this.config;\n      var el = $(this.element);\n      el.addClass(ClassName.METIS); // add metismenu class to element\n\n      el.find(\"\".concat(conf.parentTrigger, \".\").concat(ClassName.ACTIVE)).children(conf.triggerElement).attr('aria-expanded', 'true'); // add attribute aria-expanded=true the trigger element\n\n      el.find(\"\".concat(conf.parentTrigger, \".\").concat(ClassName.ACTIVE)).parents(conf.parentTrigger).addClass(ClassName.ACTIVE);\n      el.find(\"\".concat(conf.parentTrigger, \".\").concat(ClassName.ACTIVE)).parents(conf.parentTrigger).children(conf.triggerElement).attr('aria-expanded', 'true'); // add attribute aria-expanded=true the triggers of all parents\n\n      el.find(\"\".concat(conf.parentTrigger, \".\").concat(ClassName.ACTIVE)).has(conf.subMenu).children(conf.subMenu).addClass(\"\".concat(ClassName.COLLAPSE, \" \").concat(ClassName.SHOW));\n      el.find(conf.parentTrigger).not(\".\".concat(ClassName.ACTIVE)).has(conf.subMenu).children(conf.subMenu).addClass(ClassName.COLLAPSE);\n      el.find(conf.parentTrigger) // .has(conf.subMenu)\n      .children(conf.triggerElement).on(Event.CLICK_DATA_API, function (e) {\n        // eslint-disable-line func-names\n        var eTar = $(this);\n\n        if (eTar.attr('aria-disabled') === 'true') {\n          return;\n        }\n\n        if (conf.preventDefault && eTar.attr('href') === '#') {\n          e.preventDefault();\n        }\n\n        var paRent = eTar.parent(conf.parentTrigger);\n        var sibLi = paRent.siblings(conf.parentTrigger);\n        var sibTrigger = sibLi.children(conf.triggerElement);\n\n        if (paRent.hasClass(ClassName.ACTIVE)) {\n          eTar.attr('aria-expanded', 'false');\n          self.removeActive(paRent);\n        } else {\n          eTar.attr('aria-expanded', 'true');\n          self.setActive(paRent);\n\n          if (conf.toggle) {\n            self.removeActive(sibLi);\n            sibTrigger.attr('aria-expanded', 'false');\n          }\n        }\n\n        if (conf.onTransitionStart) {\n          conf.onTransitionStart(e);\n        }\n      });\n    }\n  }, {\n    key: \"setActive\",\n    value: function setActive(li) {\n      $(li).addClass(ClassName.ACTIVE);\n      var ul = $(li).children(this.config.subMenu);\n\n      if (ul.length > 0 && !ul.hasClass(ClassName.SHOW)) {\n        this.show(ul);\n      }\n    }\n  }, {\n    key: \"removeActive\",\n    value: function removeActive(li) {\n      $(li).removeClass(ClassName.ACTIVE);\n      var ul = $(li).children(\"\".concat(this.config.subMenu, \".\").concat(ClassName.SHOW));\n\n      if (ul.length > 0) {\n        this.hide(ul);\n      }\n    }\n  }, {\n    key: \"show\",\n    value: function show(element) {\n      var _this = this;\n\n      if (this.transitioning || $(element).hasClass(ClassName.COLLAPSING)) {\n        return;\n      }\n\n      var elem = $(element);\n      var startEvent = $.Event(Event.SHOW);\n      elem.trigger(startEvent);\n\n      if (startEvent.isDefaultPrevented()) {\n        return;\n      }\n\n      elem.parent(this.config.parentTrigger).addClass(ClassName.ACTIVE);\n\n      if (this.config.toggle) {\n        var toggleElem = elem.parent(this.config.parentTrigger).siblings().children(\"\".concat(this.config.subMenu, \".\").concat(ClassName.SHOW));\n        this.hide(toggleElem);\n      }\n\n      elem.removeClass(ClassName.COLLAPSE).addClass(ClassName.COLLAPSING).height(0);\n      this.setTransitioning(true);\n\n      var complete = function complete() {\n        // check if disposed\n        if (!_this.config || !_this.element) {\n          return;\n        }\n\n        elem.removeClass(ClassName.COLLAPSING).addClass(\"\".concat(ClassName.COLLAPSE, \" \").concat(ClassName.SHOW)).height('');\n\n        _this.setTransitioning(false);\n\n        elem.trigger(Event.SHOWN);\n      };\n\n      elem.height(element[0].scrollHeight).one(Util.TRANSITION_END, complete).mmEmulateTransitionEnd(TRANSITION_DURATION);\n    }\n  }, {\n    key: \"hide\",\n    value: function hide(element) {\n      var _this2 = this;\n\n      if (this.transitioning || !$(element).hasClass(ClassName.SHOW)) {\n        return;\n      }\n\n      var elem = $(element);\n      var startEvent = $.Event(Event.HIDE);\n      elem.trigger(startEvent);\n\n      if (startEvent.isDefaultPrevented()) {\n        return;\n      }\n\n      elem.parent(this.config.parentTrigger).removeClass(ClassName.ACTIVE); // eslint-disable-next-line no-unused-expressions\n\n      elem.height(elem.height())[0].offsetHeight;\n      elem.addClass(ClassName.COLLAPSING).removeClass(ClassName.COLLAPSE).removeClass(ClassName.SHOW);\n      this.setTransitioning(true);\n\n      var complete = function complete() {\n        // check if disposed\n        if (!_this2.config || !_this2.element) {\n          return;\n        }\n\n        if (_this2.transitioning && _this2.config.onTransitionEnd) {\n          _this2.config.onTransitionEnd();\n        }\n\n        _this2.setTransitioning(false);\n\n        elem.trigger(Event.HIDDEN);\n        elem.removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE);\n      };\n\n      if (elem.height() === 0 || elem.css('display') === 'none') {\n        complete();\n      } else {\n        elem.height(0).one(Util.TRANSITION_END, complete).mmEmulateTransitionEnd(TRANSITION_DURATION);\n      }\n    }\n  }, {\n    key: \"setTransitioning\",\n    value: function setTransitioning(isTransitioning) {\n      this.transitioning = isTransitioning;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      $.removeData(this.element, DATA_KEY);\n      $(this.element).find(this.config.parentTrigger).has(this.config.subMenu).children(this.config.triggerElement).off('click');\n      this.transitioning = null;\n      this.config = null;\n      this.element = null;\n    }\n  }], [{\n    key: \"jQueryInterface\",\n    value: function jQueryInterface(config) {\n      // eslint-disable-next-line func-names\n      return this.each(function () {\n        var $this = $(this);\n        var data = $this.data(DATA_KEY);\n\n        var conf = _objectSpread({}, Default, $this.data(), typeof config === 'object' && config ? config : {});\n\n        if (!data) {\n          data = new MetisMenu(this, conf);\n          $this.data(DATA_KEY, data);\n        }\n\n        if (typeof config === 'string') {\n          if (data[config] === undefined) {\n            throw new Error(\"No method named \\\"\".concat(config, \"\\\"\"));\n          }\n\n          data[config]();\n        }\n      });\n    }\n  }]);\n\n  return MetisMenu;\n}();\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n */\n\n\n$.fn[NAME] = MetisMenu.jQueryInterface; // eslint-disable-line no-param-reassign\n\n$.fn[NAME].Constructor = MetisMenu; // eslint-disable-line no-param-reassign\n\n$.fn[NAME].noConflict = function () {\n  // eslint-disable-line no-param-reassign\n  $.fn[NAME] = JQUERY_NO_CONFLICT; // eslint-disable-line no-param-reassign\n\n  return MetisMenu.jQueryInterface;\n};\n\nexport default MetisMenu;","map":null,"metadata":{},"sourceType":"module"}